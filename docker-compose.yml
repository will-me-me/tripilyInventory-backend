version: "3.8"
services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: db
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672" # RabbitMQ default port
      - "15672:15672" # RabbitMQ management plugin
    environment:
      RABBITMQ_DEFAULT_USER: root
      RABBITMQ_DEFAULT_PASS: root
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  order-service:
    build: ./order-service
    environment:
      DB_TYPE: postgres
      DB_HOST: postgres
      DB_PORT: 5433 # Update to match the host port for PostgreSQL
      POSTGRES_USER: root
      DB_USERNAME: root
      DB_PASSWORD: root
      DB_DATABASE: db
      RABBITMQ_HOST: rabbitmq # Set RabbitMQ host
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq: # Ensure RabbitMQ is available
        condition: service_healthy
    ports:
      - 3000:3000
    restart: always

  inventory-service:
    build: ./inventory-service
    environment:
      DB_TYPE: postgres
      DB_HOST: postgres
      DB_PORT: 5432 # Update to match the host port for PostgreSQL
      POSTGRES_USER: root
      DB_USERNAME: root
      DB_PASSWORD: root
      DB_DATABASE: db
      RABBITMQ_HOST: rabbitmq # Set RabbitMQ host
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq: # Ensure RabbitMQ is available
        condition: service_healthy
    ports:
      - 3001:3001
    restart: always

volumes:
  postgres_data:
  rabbitmq_data: # Volume for RabbitMQ data
